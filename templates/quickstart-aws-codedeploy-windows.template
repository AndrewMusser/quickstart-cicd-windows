{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "This template will create a Windows build server that has MSBuild pre-installed and configures CodeDeploy deployments through S3 to 1 or more CodeDeploy servers. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack.",
  "Parameters" : {   
    "KeyPairName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "DemoAppDBUserName": {
      "Default": "awsuser",
      "Description" : "The database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "DemoAppDBPassword": {
      "NoEcho": "true",
      "Description" : "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "ConstraintDescription" : "Minimum of 8 characters"
    },
    "DemoAppInclude": {
      "AllowedValues": ["yes","no"],
      "Default": "yes",
      "Description": "To include a demo application that will be used to build and deploy for testing.",
      "Type": "String"
    },
    "CodeDeployNumberOfServers": {
      "AllowedValues": ["1","2"],
      "Default": "1",
      "Description": "Choose how many test servers you want to deploy with CodeDeploy.",
      "Type": "String"
    },
    "VPC": {
      "Description": "ID of the VPC (e.g., vpc-0343606e)",
      "Type": "AWS::EC2::VPC::Id"
    },
    "VPCCIDR":{
      "Description": "CIDR block for the VPC",
      "Type": "String"
    }, 
    "PublicSubnet1": {
      "Description": "ID of the public subnet you want to provision resources to that can be accessed from the public internet",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PublicSubnet2": {
      "Description": "ID of the public subnet you want to provision resources to that can be accessed from the public internet",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet1": {
      "Description": "ID of the private subnet you want to provision resources to that can only be accessed through a gateway",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "PrivateSubnet2": {
      "Description": "ID of the private subnet you want to provision resources to that can only be accessed through a gateway",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "RDGWSecurityGroup":{
      "Description": "ID of the security group for remote access gateways that can access the build server and code deploy servers",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "CodeDeployAppName": {
      "Description": "Application name that will be used by CodeDeploy.",
      "Default" : "DemoApp",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100",
      "AllowedPattern": "[-_a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, dashes, and underscores."
    },
    "SourceFolder": {
      "Description": "This will be used to find the path to the source code to build after it is unzipped.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100"
    },
    "ReleaseFolder": {
      "Description": "This release folder can be used by the Jenkins job to only copy the binaries to the test server. All content copied into this folder will be zipped and shipped via CodeDeploy.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100"
    },
    "MSBuildProjectOrSolutionFileName": {
      "Description": "We need the path inside of your code archive to the .proj or .sln file used to drive the MSBuild step in Jenkins.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100"
    },
    "JenkinsUserName": {
      "Default": "JenkinsUser",
      "Description" : "This account will be given access to Jenkins to configure and run builds.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },
    "JenkinsPassword": {
      "NoEcho": "true",
      "Description" : "The password for the Jenkins user.",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "ConstraintDescription" : "Minimum of 8 characters"
    },
    "CodeDeployDeploymentGroupName": {
      "Description": "DeploymentGroup name that will be used by CodeDeploy.",
      "Default" : "DemoApp-DG",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "100",
      "AllowedPattern": "[-_a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric lower case characters, dashes, and underscores."
    }
  },
  "Conditions" :{
    "DemoAppIncluded" : { "Fn::Equals" : [ { "Ref" : "DemoAppInclude" }, "yes" ] },
    "DemoAppNotIncluded" : { "Fn::Equals" : [ { "Ref" : "DemoAppInclude" }, "no" ] },
    "CreateOneCodeDeployServer" : { "Fn::Equals" : [ { "Ref" : "CodeDeployNumberOfServers" }, "1" ] },
    "CreateMultipleCodeDeployServers" : { "Fn::Equals" : [ { "Ref" : "CodeDeployNumberOfServers" }, "2" ] }
  },
  "Mappings": {
    "AWSAMIRegionMap": {
      "AMI": {
        "WS2012R2": "Windows_Server-2012-R2_RTM-English-64Bit-Base-2016.06.15"
      },
      "ap-northeast-1": {
        "WS2012R2": "ami-7b62881a"
      },
      "ap-northeast-2": {
        "WS2012R2": "ami-082ee566"
      },
      "ap-south-1": {
        "WS2012R2": "ami-7aacc615"
      },
      "ap-southeast-1": {
        "WS2012R2": "ami-e113c082"
      },
      "ap-southeast-2": {
        "WS2012R2": "ami-83b198e0"
      },
      "eu-central-1": {
        "WS2012R2": "ami-fa799095"
      },
      "eu-west-1": {
        "WS2012R2": "ami-50e67823"
      },
      "sa-east-1": {
        "WS2012R2": "ami-0b6be167"
      },
      "us-east-1": {
        "WS2012R2": "ami-79dc1b14"
      },
      "us-west-1": {
        "WS2012R2": "ami-cface9af"
      },
      "us-west-2": {
       "WS2012R2": "ami-8d0acfed"
      }
    }
  },
  "Resources": {
    "MyDBSecurityGroup" : {
      "Type" : "AWS::RDS::DBSecurityGroup",
      "Condition" : "DemoAppIncluded",
      "Properties" : {
        "GroupDescription" : "Security group for Quickstart RDS DB Instance",
        "DBSecurityGroupIngress" : {"CIDRIP" : { "Ref" : "VPCCIDR"}},
        "EC2VpcId" : { "Ref" : "VPC" }
      }
    },
    "MyDBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Condition" : "DemoAppIncluded",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
        "SubnetIds" : [ { "Ref" : "PrivateSubnet1" }, {"Ref" : "PrivateSubnet2" } ]
      }
    },
    "MyDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Condition" : "DemoAppIncluded",
      "Properties" : {
        "AllocatedStorage" : "50",
        "DBInstanceClass" : "db.m3.medium",
        "Engine" : "sqlserver-web",
        "EngineVersion" : "12.00.4422.0.v1",
        "MultiAZ" : "false",
        "MasterUsername" : { "Ref" : "DemoAppDBUserName" } ,
        "MasterUserPassword" : { "Ref" : "DemoAppDBPassword" },
        "DBSubnetGroupName" : { "Ref" : "MyDBSubnetGroup" },
        "DBSecurityGroups" : [ { "Ref" : "MyDBSecurityGroup" } ]
      }
    },
    "SourceCodeBucket" : {
      "DeletionPolicy" : "Retain",
      "Type" : "AWS::S3::Bucket",
      "Properties": {
        "BucketName" : { "Fn::Join" : ["", [ "quickstart-dotnet-ci-source-", { "Ref": "AWS::Region" } , "-", {"Ref" : "AWS::AccountId"} ]] },
        "VersioningConfiguration" : {
          "Status" : "Enabled"
        },
        "Tags" : [
          {"Key" : "Name", "Value" : "QuickStart-WindowsDotNet-Pipeline" }
        ]
      }
    },
    "BuildServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable RDP access via port 3389",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": { "Ref" : "RDGWSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref" : "BuildServerELBSG" }
          }
        ]
      }
    },
    "CodeDeployServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "GroupDescription": "Enable RDP access via port 3389 and port 80 for web site access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": { "Ref" : "RDGWSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": { "Ref" : "CodeDeployELBSG" }
          }
        ]
      }
    },
    "CodeDeployELBSG": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
       "GroupDescription": "Security Group for Windows Test Server ELB",
       "VpcId": {"Ref": "VPC"},
       "SecurityGroupIngress": [
          {
             "IpProtocol": "tcp",
             "FromPort": "80",
             "ToPort": "80",
             "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "BuildServerELBSG": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
       "GroupDescription": "Security Group for Windows Build Server ELB",
       "VpcId": {"Ref": "VPC"},
       "SecurityGroupIngress": [
          {
             "IpProtocol": "tcp",
             "FromPort": "80",
             "ToPort": "80",
             "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "BuildServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "buildserverpolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:ListBucket",
                  "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SourceCodeBucket" } ] ] } 
                },
                {
                  "Effect": "Allow",
                  "Action": [ 
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ], 
                  "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SourceCodeBucket" }, "/*" ] ] } 
                },
                {
                  "Effect": "Allow",
              	  "Action": [
                     "codepipeline:AcknowledgeJob",
                     "codepipeline:GetJobDetails",
                     "codepipeline:PollForJobs",
                     "codepipeline:PutJobFailureResult",
                     "codepipeline:PutJobSuccessResult"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "BuildServerInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BuildServerRole"
          }
        ]
      }
    },
    "CodeDeployServerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  {"Fn::Join":["",["codedeploy.",{ "Ref":"AWS::Region" },".amazonaws.com"]]}
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "codedeployserverpolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "codedeploy:*",
                  "Resource": [
                    { "Fn::Join" : ["", ["arn:aws:codedeploy:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":application:", { "Ref" : "CodeDeployAppName" }  ]  ] }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "s3:GetObject", 
                  "Resource": [
                     { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "SourceCodeBucket" }, "/*" ] ] },
                     { "Fn::Join" : ["", ["arn:aws:s3:::aws-codedeploy-",{ "Ref" : "AWS::Region" },"/*"] ] }
                   ]
                },
                {
            		  "Action": [ "ec2:DescribeInstances","ec2:DescribeInstanceStatus"],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "CodeDeployTargetServerProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployServerRole"
          }
        ]
      }
    },
    "CodePipelineTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodePipelineRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Condition" : "DemoAppNotIncluded",
      "Properties": {
        "PolicyName": "CodePipelinePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:PutObject"
              ],
              "Resource": [
                { "Fn::Join" : ["", [ "arn:aws:s3:::quickstart-dotnet-ci-source-", { "Ref": "AWS::Region" } , "-", {"Ref" : "AWS::AccountId"} ]] }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "codepipeline:*",
                "iam:ListRoles",
                "iam:PassRole",
                "codedeploy:CreateDeployment",
                "codedeploy:GetApplicationRevision",
                "codedeploy:GetDeployment",
                "codedeploy:GetDeploymentConfig",
                "codedeploy:RegisterApplicationRevision"
              ],
              "Resource": [
                { "Fn::Join" : ["", [ "arn:aws:codepipeline:", { "Ref": "AWS::Region" },":",{"Ref": "AWS::AccountId"},":", {"Ref": "MyPipeline"}]] }
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [{ "Ref": "CodePipelineTrustRole"}]
      }
    },
    "CodePipelineRolePoliciesWithDemoApp": {
      "Type": "AWS::IAM::Policy",
      "Condition" : "DemoAppIncluded",
      "Properties": {
        "PolicyName": "CodePipelinePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:PutObject"
              ],
              "Resource": [
                "arn:aws:s3:::tomfullershare",
                { "Fn::Join" : ["", [ "arn:aws:s3:::quickstart-dotnet-ci-source-", { "Ref": "AWS::Region" } , "-", {"Ref" : "AWS::AccountId"} ]] }
              ],
              "Effect": "Allow"
            },
            {
              "Action": [
                "codepipeline:*",
                "iam:ListRoles",
                "iam:PassRole",
                "codedeploy:CreateDeployment",
                "codedeploy:GetApplicationRevision",
                "codedeploy:GetDeployment",
                "codedeploy:GetDeploymentConfig",
                "codedeploy:RegisterApplicationRevision"
              ],
              "Resource": [
                { "Fn::Join" : ["", [ "arn:aws:codepipeline:", { "Ref": "AWS::Region" },":",{"Ref": "AWS::AccountId"},":", {"Ref": "MyPipelineWithDemoApp"}]] }
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Roles": [{ "Ref": "CodePipelineTrustRole"}]
      }
   },
   "MSBuildWithJenkinsInstance" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : "SourceCodeBucket",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "C:\\cfn\\scripts\\Unzip-Archive.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Unzip-Archive.ps1"
              },
              "C:\\cfn\\modules\\AWSQuickStart.zip": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/modules/AWSQuickStart.zip"
              },
              "c:\\cfn\\scripts\\Download-File.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Download-File.ps1"
              },
              "c:\\cfn\\scripts\\Install-DotNetBuildServer-Jenkins.ps1": {
                "source": "https://s3.amazonaws.com/tomfullershare/Install-DotNetBuildServer-Jenkins.ps1"
              },
              "c:\\cfn\\scripts\\create-jenkins-user.groovy":{
                "content": {
                  "Fn::Join": ["",
                    [
                      "import jenkins.model.*\n\n",
                      "jenkins.model.Jenkins.instance.securityRealm.createAccount('",
                      {"Ref": "JenkinsUserName"},
                      "','",
                      {"Ref": "JenkinsPassword"},
                      "')\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\config\\config.xml":{
                "content": {
                  "Fn::Join": ["",
                    [ 
                     "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
                      "<project>",
                         "<actions/><description/><keepDependencies>false</keepDependencies><properties/>",
                         "<scm plugin=\"aws-codepipeline@0.16\" class=\"com.amazonaws.codepipeline.jenkinsplugin.AWSCodePipelineSCM\">",
                            "<clearWorkspace>true</clearWorkspace>",
                            "<projectName>",
                              {"Ref": "CodeDeployAppName"},
                            "</projectName>",
                            "<actionTypeCategory>Build</actionTypeCategory>",
                            "<actionTypeProvider>",
                              {"Ref": "CodeDeployAppName"},
                            "-Jenkins</actionTypeProvider>",
                            "<actionTypeVersion>1</actionTypeVersion>",
                            "<region>",
                              {"Ref": "AWS::Region"},
                            "</region>",
                            "<awsAccessKey/>",
                            "<awsSecretKey/>",
                            "<proxyHost/>",
                            "<proxyPort>0</proxyPort>",
                            "<awsClientFactory/>",
                         "</scm>",
                         "<canRoam>true</canRoam>",
                         "<disabled>false</disabled>",
                         "<blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>",
                         "<blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>",
                         "<triggers>",
                            "<hudson.triggers.SCMTrigger>",
                               "<spec>* * * * *</spec>",
                               "<ignorePostCommitHooks>false</ignorePostCommitHooks>",
                            "</hudson.triggers.SCMTrigger>",
                         "</triggers>",
                         "<concurrentBuild>false</concurrentBuild>",
                         "<builders>",
                            "<hudson.plugins.msbuild.MsBuildBuilder plugin=\"msbuild@1.26\">",
                               "<msBuildName>14.0</msBuildName>",
                               "<msBuildFile>C:\\Program Files (x86)\\Jenkins\\workspace\\",
                               {"Ref": "CodeDeployAppName"},
                               "\\", 
                               {"Ref": "SourceFolder"},
                               "\\",
                               {"Ref": "MSBuildProjectOrSolutionFileName"},
                               "</msBuildFile>",
                               "<cmdLineArgs>/p:SourceFolder=",
                               {"Ref": "CodeDeployAppName"},
                               "\\", 
                               {"Ref": "SourceFolder"},
                               " /p:ReleaseFolder=",
                               {"Ref": "CodeDeployAppName"},
                               "\\", 
                               {"Ref": "ReleaseFolder"},
                               " /t:Build",
                               "</cmdLineArgs>",
                               "<buildVariablesAsProperties>false</buildVariablesAsProperties>",
                               "<continueOnBuildFailure>false</continueOnBuildFailure>",
                               "<unstableIfWarnings>false</unstableIfWarnings>",
                            "</hudson.plugins.msbuild.MsBuildBuilder>",
                         "</builders>",
                         "<publishers>",
                            "<com.amazonaws.codepipeline.jenkinsplugin.AWSCodePipelinePublisher plugin=\"aws-codepipeline@0.16\">",
                               "<outputArtifacts>",
                                  "<com.amazonaws.codepipeline.jenkinsplugin.OutputArtifact>",
                                     "<location>C:\\Program Files (x86)\\Jenkins\\workspace\\",
                                     {"Ref": "CodeDeployAppName"},
                                     "\\", 
                                     {"Ref": "ReleaseFolder"},
                                     "</location>", 
                                  "</com.amazonaws.codepipeline.jenkinsplugin.OutputArtifact>",
                               "</outputArtifacts>",
                               "<awsClientFactory/>",
                            "</com.amazonaws.codepipeline.jenkinsplugin.AWSCodePipelinePublisher>",
                         "</publishers>",
                         "<buildWrappers/>",
                      "</project>"
                     ]
                   ]
                }
             }
            },
            "commands": {
              "a-set-execution-policy": {
                 "command": "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                 "waitAfterCompletion": "0"
              },
              "b-unpack-quickstart-module": {
                  "command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                  "waitAfterCompletion": "0"
              },
              "c-init-quickstart-module": {
                  "command": {
                    "Fn::Join": ["",
                       [
                         "powershell.exe -Command \"",
                         "New-AWSQuickStartResourceSignal -Stack '",
                         {
                            "Ref": "AWS::StackName"
                         },
                            "' -Resource 'MSBuildWithJenkinsInstance' -Region '",
                         {
                            "Ref": "AWS::Region"
                         },
                         "'\""
                       ]
                    ]
                  },
                  "waitAfterCompletion": "0"
              },
              "d-download-jenkins": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "http://mirrors.jenkins-ci.org/windows/latest",
                         "' -Destination 'C:\\cfn\\downloads\\jenkins.zip'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "e-unpack-jenkins":{
                "command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\downloads\\jenkins.zip -Destination C:\\cfn\\downloads\\",
                  "waitAfterCompletion": "0"
              }, 
              "f-download-jenkins-msbuild-plugin": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "http://updates.jenkins-ci.org/latest/msbuild.hpi",
                         "' -Destination 'C:\\cfn\\downloads\\msbuild.hpi'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "g-download-jenkins-code-pipeline-plugin": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "https://updates.jenkins-ci.org/latest/aws-codepipeline.hpi",
                         "' -Destination 'C:\\cfn\\downloads\\aws-codepipeline.hpi'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "h-download-jenkins-groovy-plugin": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "https://updates.jenkins-ci.org/latest/groovy.hpi",
                         "' -Destination 'C:\\cfn\\downloads\\groovy.hpi'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "i-download-msbuild": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "https://download.microsoft.com/download/E/E/D/EEDF18A8-4AED-4CE0-BEBE-70A83094FC5A/BuildTools_Full.exe",
                         "' -Destination 'C:\\cfn\\downloads\\BuildTools_Full.exe'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "j-install-dotnet-build-server-components": {
                  "command": "powershell.exe -Command \"C:\\cfn\\Scripts\\Install-DotNetBuildServer-Jenkins.ps1\"",
                  "waitAfterCompletion": 0
              },
              "k-create-initial-jenkins-job": {
                "command": {
                  "Fn::Join":[
                    "",
                    [
                      "cd C:\\Program Files (x86)\\Jenkins\\jre\\bin\n",
                      "java.exe -jar \"C:\\Program Files (x86)\\Jenkins\\war\\WEB-INF\\jenkins-cli.jar\" -s http://localhost:8080 create-job ",
                      {"Ref": "CodeDeployAppName"},
                      " --username ",
                      {"Ref": "JenkinsUserName"},
                      " --password ",
                      {"Ref": "JenkinsPassword"},
                      " < c:\\cfn\\config\\config.xml"
                    ]
                  ]
                },
                "waitAfterCompletion": 0
              },              
              "l-signal-success": {
                "command": "powershell.exe -Command \"Write-AWSQuickStartStatus\"",
                "waitAfterCompletion": 0
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : "t2.large",
        "SecurityGroupIds" : [{"Ref": "BuildServerSecurityGroup"} ],
        "ImageId" : { "Fn::FindInMap" : [ "AWSAMIRegionMap", { "Ref" : "AWS::Region" }, "WS2012R2" ]},
        "IamInstanceProfile": {"Ref":"BuildServerInstanceProfile"},
        "SubnetId": {"Ref":"PrivateSubnet1"},
        "KeyName": {"Ref": "KeyPairName"},
        "Tags" : [ { "Key" : "Name", "Value" : "QuickStart-WindowsBuildServer" }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
               [
                 "<script>\n",
                 "cfn-init.exe -v -s ",
                 {
                   "Ref": "AWS::StackId"
                 },
                 " -r MSBuildWithJenkinsInstance",
                 " --region ",
                 {
                   "Ref": "AWS::Region"
                 },
                 "\n",
                 "</script>\n"
               ]
             ]
           }
         }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT25M"
        }
      }
    },
    "CodeDeployServerInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "C:\\cfn\\scripts\\Unzip-Archive.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Unzip-Archive.ps1"
              },
              "C:\\cfn\\modules\\AWSQuickStart.zip": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/modules/AWSQuickStart.zip"
              },
              "c:\\cfn\\scripts\\Download-File.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Download-File.ps1"
              },
              "c:\\cfn\\scripts\\Install-CodeDeploy.ps1": {
                "source": "https://s3.amazonaws.com/tomfullershare/Install-CodeDeploy.ps1"
              }
            }, 
            "commands": {
              "a-set-execution-policy": {
                 "command": "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                 "waitAfterCompletion": "0"
              },
              "b-unpack-quickstart-module": {
                  "command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                  "waitAfterCompletion": "0"
              },
              "c-init-quickstart-module": {
                  "command": {
                    "Fn::Join": ["",
                       [
                         "powershell.exe -Command \"",
                         "New-AWSQuickStartResourceSignal -Stack '",
                         {
                            "Ref": "AWS::StackName"
                         },
                            "' -Resource 'CodeDeployServerInstance' -Region '",
                         {
                            "Ref": "AWS::Region"
                         },
                         "'\""
                       ]
                    ]
                  },
                  "waitAfterCompletion": "0"
              },
              "d-install-iis-aspnet-45": {
                "command": {
                  "Fn::Join": ["", ["powershell.exe -Command Install-WindowsFeature Web-Server,Web-Asp-Net45 -IncludeManagementTools"] ]
                },
                "waitAfterCompletion": "0"
              },
              "e-download-code-deploy-agent": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/codedeploy-agent.msi",
                         "' -Destination 'C:\\cfn\\downloads\\codedeploy-agent.msi'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "f-install-code-deploy-agent": {
                "command": "powershell.exe -Command \"C:\\cfn\\scripts\\Install-CodeDeploy.ps1\"",
                "waitAfterCompletion": "0"
              },
              "g-signal-success": {
                "command": "powershell.exe -Command \"Write-AWSQuickStartStatus\"",
                "waitAfterCompletion": "0"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : "t2.medium",
        "SecurityGroupIds" : [{"Ref": "CodeDeployServerSecurityGroup"} ],
        "SubnetId": {"Ref": "PrivateSubnet1"},
        "ImageId" : { "Fn::FindInMap" : [ "AWSAMIRegionMap", { "Ref" : "AWS::Region" }, "WS2012R2" ]},
        "IamInstanceProfile": {"Ref":"CodeDeployTargetServerProfile"},
        "KeyName": {"Ref": "KeyPairName"},
        "Tags" : [ { "Key" : "Name", "Value" : "QuickStart-WindowsTestServer" }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
               [
                 "<script>\n",
                 "cfn-init.exe -v -s ",
                 {
                   "Ref": "AWS::StackId"
                 },
                 " -r CodeDeployServerInstance",
                 " --region ",
                 {
                   "Ref": "AWS::Region"
                 },
                 "\n",
                 "</script>\n"
               ]
             ]
           }
         }        
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT25M"
        }
      }
    },
    "CodeDeployServerInstance2" : {
      "Type" : "AWS::EC2::Instance",
      "Condition" : "CreateMultipleCodeDeployServers",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "C:\\cfn\\scripts\\Unzip-Archive.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Unzip-Archive.ps1"
              },
              "C:\\cfn\\modules\\AWSQuickStart.zip": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/modules/AWSQuickStart.zip"
              },
              "c:\\cfn\\scripts\\Download-File.ps1": {
                "source": "https://s3.amazonaws.com/quickstart-reference/microsoft/sharepoint/latest/microsoft-utilities/scripts/Download-File.ps1"
              },
              "c:\\cfn\\scripts\\Install-CodeDeploy.ps1": {
                "source": "https://s3.amazonaws.com/tomfullershare/Install-CodeDeploy.ps1"
              }
            }, 
            "commands": {
              "a-set-execution-policy": {
                 "command": "powershell.exe -Command \"Set-ExecutionPolicy RemoteSigned -Force\"",
                 "waitAfterCompletion": "0"
              },
              "b-unpack-quickstart-module": {
                  "command": "powershell.exe -Command C:\\cfn\\scripts\\Unzip-Archive.ps1 -Source C:\\cfn\\modules\\AWSQuickStart.zip -Destination C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\",
                  "waitAfterCompletion": "0"
              },
              "c-init-quickstart-module": {
                  "command": {
                    "Fn::Join": ["",
                       [
                         "powershell.exe -Command \"",
                         "New-AWSQuickStartResourceSignal -Stack '",
                         {
                            "Ref": "AWS::StackName"
                         },
                            "' -Resource 'CodeDeployServerInstance2' -Region '",
                         {
                            "Ref": "AWS::Region"
                         },
                         "'\""
                       ]
                    ]
                  },
                  "waitAfterCompletion": "0"
              },
              "d-install-iis-aspnet-45": {
                "command": {
                  "Fn::Join": ["", ["powershell.exe -Command Install-WindowsFeature Web-Server,Web-Asp-Net45 -IncludeManagementTools"] ]
                },
                "waitAfterCompletion": "0"
              },
              "e-download-code-deploy-agent": {
                 "command": {
                    "Fn::Join": ["",
                      [
                        "powershell.exe -Command \"C:\\cfn\\scripts\\Download-File.ps1 -Source '",
                        "https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/codedeploy-agent.msi",
                         "' -Destination 'C:\\cfn\\downloads\\codedeploy-agent.msi'\""
                      ]
                   ]
                 },
                 "waitAfterCompletion": "0"
              },
              "f-install-code-deploy-agent": {
                "command": "powershell.exe -Command \"C:\\cfn\\scripts\\Install-CodeDeploy.ps1\"",
                "waitAfterCompletion": "0"
              },
              "g-signal-success": {
                "command": "powershell.exe -Command \"Write-AWSQuickStartStatus\"",
                "waitAfterCompletion": "0"
              }
            }
          }
        }
      },
      "Properties" : {
        "InstanceType" : "t2.medium",
        "SecurityGroupIds" : [{"Ref": "CodeDeployServerSecurityGroup"} ],
        "SubnetId": {"Ref": "PrivateSubnet2"},
        "ImageId" : { "Fn::FindInMap" : [ "AWSAMIRegionMap", { "Ref" : "AWS::Region" }, "WS2012R2" ]},
        "IamInstanceProfile": {"Ref":"CodeDeployTargetServerProfile"},
        "KeyName": {"Ref": "KeyPairName"},
        "Tags" : [ { "Key" : "Name", "Value" : "QuickStart-WindowsTestServer" }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
               [
                 "<script>\n",
                 "cfn-init.exe -v -s ",
                 {
                   "Ref": "AWS::StackId"
                 },
                 " -r CodeDeployServerInstance2",
                 " --region ",
                 {
                   "Ref": "AWS::Region"
                 },
                 "\n",
                 "</script>\n"
               ]
             ]
           }
         }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT25M"
        }
      }
    },
    "CodeDeployTestingELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "CodeDeployServerInstance",
      "Properties": {
        "Subnets": [{"Ref":"PublicSubnet1"},{"Ref":"PublicSubnet2"}],
        "Scheme": "internet-facing",
        "Instances": {"Fn::If" : [
            "CreateMultipleCodeDeployServers",
            [{"Ref": "CodeDeployServerInstance"},{"Ref": "CodeDeployServerInstance2"}],
            [{"Ref": "CodeDeployServerInstance"}]
          ]
        },
        "Listeners": [{"LoadBalancerPort": "80","InstancePort": "80","Protocol": "TCP"}],
        "SecurityGroups": [{"Ref": "CodeDeployELBSG"}],
        "HealthCheck": {"Target": "TCP:80","HealthyThreshold": "3","UnhealthyThreshold": "5","Interval": "10","Timeout": "5"}
      }
    },
    "BuildServerELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "MSBuildWithJenkinsInstance",
      "Properties": {
        "Subnets": [{"Ref":"PublicSubnet1"},{"Ref":"PublicSubnet2"}],
        "Scheme": "internet-facing",
        "Instances": [{"Ref": "MSBuildWithJenkinsInstance"}],
        "Listeners": [{"LoadBalancerPort": "80","InstancePort": "8080","Protocol": "TCP"}],
        "SecurityGroups": [{"Ref": "BuildServerELBSG"}],
        "HealthCheck": {"Target": "TCP:8080","HealthyThreshold": "3","UnhealthyThreshold": "5","Interval": "10","Timeout": "5"}
      }
    },
    "CustomJenkinsActionType": {
      "Type": "AWS::CodePipeline::CustomActionType",
      "DependsOn" : "BuildServerELB",
      "Properties": {
        "Category": "Build",
        "Provider": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Jenkins"]]},
        "Version": "2",
        "ConfigurationProperties": [
          {
            "Key": "true",
            "Name":  "ProjectName",
            "Queryable": "true",
            "Required": "true",
            "Secret": "false",
            "Type": "String"
          }
        ],
        "InputArtifactDetails": {
          "MaximumCount": 5,
          "MinimumCount": 0
        },
        "OutputArtifactDetails": {
          "MaximumCount": 5,
          "MinimumCount": 0
        },
        "Settings": {
          "EntityUrlTemplate": {"Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "BuildServerELB", "DNSName" ]}, "/job/{Config:ProjectName}"]]},
          "ExecutionUrlTemplate": {"Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "BuildServerELB", "DNSName" ]}, "/job/{Config:ProjectName}/{ExternalExecutionId}"]]}
        }
      }
    },
    "MyPipelineWithDemoApp": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Condition" : "DemoAppIncluded",
      "DependsOn" : "CustomJenkinsActionType",
      "Properties": {
        "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Pipeline"]]},
        "RoleArn": {"Fn::GetAtt" : ["CodePipelineTrustRole", "Arn"]},
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "ApplicationSource",
                "InputArtifacts": [],
                "ActionTypeId": {
                  "Version": "1",
                  "Category": "Source",
                  "Owner" : "AWS",
                  "Provider": "S3"
                },
                "OutputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-SourceArtifact"]]}
                  }
                ],
                "Configuration": {
                      "S3Bucket": "tomfullershare",
                      "S3ObjectKey": "DemoApp.zip"
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "ApplicationBuild",
                "InputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-SourceArtifact"]]}
                  }
                ],
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "Custom",
                  "Version": "1",
                  "Provider": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Jenkins"]]}
                },
                "OutputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-BuiltArtifact"]]}
                  }
                ],
                "Configuration": {
                  "ProjectName": {"Ref" : "CodeDeployAppName"}
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Test",
            "Actions": [
              {
                "Name": "DeployToTest",
                "InputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-BuiltArtifact"]]}
                  }
                ],
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeDeploy"
                },
                "Configuration": {
                  "ApplicationName": {"Ref" : "CodeDeployAppName"},
                  "DeploymentGroupName": {"Ref" : "CodeDeployDeploymentGroupName"}
                },
                "RunOrder": 1
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": { "Fn::Join" : ["", [ "quickstart-dotnet-ci-source-", { "Ref": "AWS::Region" } , "-", {"Ref" : "AWS::AccountId"} ]] }
        }
      }
    },
    "MyPipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Condition" : "DemoAppNotIncluded",
      "DependsOn" : "CustomJenkinsActionType",
      "Properties": {
        "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Pipeline"]]},
        "RoleArn": {"Fn::GetAtt" : ["CodePipelineTrustRole", "Arn"]},
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "ApplicationSource",
                "InputArtifacts": [],
                "ActionTypeId": {
                  "Version": "1",
                  "Category": "Source",
                  "Owner" : "AWS",
                  "Provider": "S3"
                },
                "OutputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-SourceArtifact"]]}
                  }
                ],
                "Configuration": {
                      "S3Bucket": {"Ref" : "SourceCodeBucket"},
                      "S3ObjectKey": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Source.zip"]]}
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "ApplicationBuild",
                "InputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-SourceArtifact"]]}
                  }
                ],
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "Custom",
                  "Version": "1",
                  "Provider": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-Jenkins"]]}
                },
                "OutputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-BuiltArtifact"]]}
                  }
                ],
                "Configuration": {
                  "ProjectName": {"Ref" : "CodeDeployAppName"}
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Test",
            "Actions": [
              {
                "Name": "DeployToTest",
                "InputArtifacts": [
                  {
                    "Name": {"Fn::Join" : ["", [{"Ref" : "CodeDeployAppName"}, "-BuiltArtifact"]]}
                  }
                ],
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeDeploy"
                },
                "Configuration": {
                  "ApplicationName": {"Ref" : "CodeDeployAppName"},
                  "DeploymentGroupName": {"Ref" : "CodeDeployDeploymentGroupName"}
                },
                "RunOrder": 1
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": { "Fn::Join" : ["", [ "quickstart-dotnet-ci-source-", { "Ref": "AWS::Region" } , "-", {"Ref" : "AWS::AccountId"} ]] }
        }
      }
    },
    "MyApplication" : {
      "Type" : "AWS::CodeDeploy::Application",
      "Properties" : {
        "ApplicationName" : { "Ref" : "CodeDeployAppName" } 
      }
    },
    "MyDeploymentGroup" : {
      "Type" : "AWS::CodeDeploy::DeploymentGroup",
      "DependsOn" : "CodeDeployServerInstance",
      "Properties" : {
        "ApplicationName" : {"Ref" : "CodeDeployAppName"},
        "DeploymentConfigName" : "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName" : { "Ref" : "CodeDeployDeploymentGroupName" }, 
        "Ec2TagFilters" : [{
          "Key" : "Name",
          "Value" : "QuickStart-WindowsTestServer",
          "Type" : "KEY_AND_VALUE"
        }],
        "ServiceRoleArn" : {"Fn::GetAtt":["CodeDeployServerRole","Arn"]}
      }
    }
  },
  "Outputs": {
    "S3Bucket" : {
      "Value" : {"Ref":"SourceCodeBucket"},
      "Description" : "S3 Bucket where the code is deployed from."
    },
    "CodeDeployELBDNSName" : {
      "Value" : {"Fn::GetAtt" : [ "CodeDeployTestingELB", "DNSName" ]},
      "Description" : "Address of the Elastic Load Balancer for accessing a web service deployed to the Code Deploy servers."
    },
    "BuildServerELBDNSName" : {
      "Value" : {"Fn::GetAtt" : [ "BuildServerELB", "DNSName" ]},
      "Description" : "Address of the Elastic Load Balancer for accessing the build server."
    }
  }
}